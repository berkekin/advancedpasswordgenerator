{\rtf1\ansi\ansicpg1254\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset162 Calibri;}{\f1\fmodern JetBrains Mono;}{\f2\fnil\fcharset0 Calibri;}{\f3\fnil\fcharset238 Arial;}}
{\colortbl ;\red0\green0\blue0;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf1\f0\fs22\lang1055 MainActivity.java:   \f1\fs20 package com.example.passwordgenerator;\line\line import android.content.ClipData;\line import android.content.ClipboardManager;\line import android.content.Context;\line import android.os.Bundle;\line import android.view.View;\line import android.widget.Button;\line import android.widget.CheckBox;\line import android.widget.EditText;\line import android.widget.TextView;\line import android.widget.Toast;\line import androidx.appcompat.app.AppCompatActivity;\line import java.security.SecureRandom;\line import java.util.HashSet;\line import java.util.Random;\line import java.util.Set;\line\line public class MainActivity extends AppCompatActivity \{\line\line     private TextView passwordTextView;\line     private EditText passwordLength;\line     private CheckBox useNumbers, useSpecialCharacters, useUpperCase, useLowerCase, useUniqueCharacters;\line     private Button generateButton, copyButton;\line\line     @Override\line     protected void onCreate(Bundle savedInstanceState) \{\line         super.onCreate(savedInstanceState);\line         setContentView(R.layout.\i activity_main\i0 );\line\line         passwordTextView = findViewById(R.id.\i passwordTextView\i0 );\line         passwordLength = findViewById(R.id.\i passwordLength\i0 );\line         useNumbers = findViewById(R.id.\i useNumbers\i0 );\line         useSpecialCharacters = findViewById(R.id.\i useSpecialCharacters\i0 );\line         useUpperCase = findViewById(R.id.\i useUpperCase\i0 );\line         useLowerCase = findViewById(R.id.\i useLowerCase\i0 );\line         useUniqueCharacters = findViewById(R.id.\i useUniqueCharacters\i0 );\line         generateButton = findViewById(R.id.\i generateButton\i0 );\line         copyButton = findViewById(R.id.\i copyButton\i0 );\line\line         generateButton.setOnClickListener(new View.OnClickListener() \{\line             @Override\line             public void onClick(View v) \{\line                 generatePasswordAndHandleErrors();\line             \}\line         \});\line\line         copyButton.setOnClickListener(new View.OnClickListener() \{\line             @Override\line             public void onClick(View v) \{\line                 copyPasswordToClipboard();\line             \}\line         \});\line     \}\line\line     private void generatePasswordAndHandleErrors() \{\line         String lengthStr = passwordLength.getText().toString();\line\line         if (lengthStr.isEmpty()) \{\line             showToast("Enter password length");\line             return;\line         \}\line\line         int length = Integer.\i parseInt\i0 (lengthStr);\line\line         if (length <= 0) \{\line             showToast("Enter a valid password length");\line             return;\line         \}\line\line         if (!useNumbers.isChecked() && !useSpecialCharacters.isChecked() && !useUpperCase.isChecked() && !useLowerCase.isChecked()) \{\line             showToast("At least one option must be checked");\line             return;\line         \}\line\line         String password = generatePassword(length, useNumbers.isChecked(), useSpecialCharacters.isChecked(), useUpperCase.isChecked(), useLowerCase.isChecked(), useUniqueCharacters.isChecked());\line         passwordTextView.setText(password);\line         showPasswordStrength(password, length);\line     \}\line\line     private void copyPasswordToClipboard() \{\line         ClipboardManager clipboard = (ClipboardManager) getSystemService(Context.\i CLIPBOARD_SERVICE\i0 );\line         ClipData clip = ClipData.\i newPlainText\i0 ("password", passwordTextView.getText().toString());\line         clipboard.setPrimaryClip(clip);\line         showToast("Password Copied");\line     \}\line\line     private String generatePassword(int length, boolean includeNumbers, boolean includeSpecial, boolean includeUpperCase, boolean includeLowerCase, boolean includeUniqueCharacters) \{\line         StringBuilder password = new StringBuilder();\line         String charSet = buildCharSet(includeNumbers, includeSpecial, includeUpperCase, includeLowerCase);\line\line         if (includeUniqueCharacters) \{\line             return generateUniquePassword(charSet, length);\line         \} else \{\line             return generateNonUniquePassword(charSet, length);\line         \}\line     \}\line\line     private String buildCharSet(boolean includeNumbers, boolean includeSpecial, boolean includeUpperCase, boolean includeLowerCase) \{\line         StringBuilder charSet = new StringBuilder();\line\line         if (includeUpperCase) \{\line             charSet.append("ABCDEFGHIJKLMNOPQRSTUVWXYZ");\line         \}\line         if (includeLowerCase) \{\line             charSet.append("abcdefghijklmnopqrstuvwxyz");\line         \}\line         if (includeNumbers) \{\line             charSet.append("0123456789");\line         \}\line         if (includeSpecial) \{\line             charSet.append("!@#$%^&*()-_=+[]\{\};:,.<>?");\line         \}\line\line         return charSet.toString();\line     \}\line\line     private String generateUniquePassword(String charSet, int length) \{\line         if (length > charSet.length()) \{\line             return "More characters needed!";\line         \}\line\line         StringBuilder password = new StringBuilder();\line         Set<Character> usedCharacters = new HashSet<>();\line         Random random = new SecureRandom();\line\line         while (password.length() < length) \{\line             char randomChar = charSet.charAt(random.nextInt(charSet.length()));\line             if (!usedCharacters.contains(randomChar)) \{\line                 password.append(randomChar);\line                 usedCharacters.add(randomChar);\line             \}\line         \}\line\line         return password.toString();\line     \}\line\line     private String generateNonUniquePassword(String charSet, int length) \{\line         StringBuilder password = new StringBuilder();\line         Random random = new SecureRandom();\line\line         for (int i = 0; i < length; i++) \{\line             password.append(charSet.charAt(random.nextInt(charSet.length())));\line         \}\line\line         return password.toString();\line     \}\line\line     private void showPasswordStrength(String password, int length) \{\line         String strength = calculatePasswordStrength(password, length);\line         Toast.\i makeText\i0 (MainActivity.this, "Password Strength: " + strength, Toast.\i LENGTH_SHORT\i0 ).show();\line     \}\line\line     private String calculatePasswordStrength(String password, int length) \{\line         int strength = 0;\line         boolean hasLowerCase = false;\line         boolean hasUpperCase = false;\line         boolean hasDigit = false;\line         boolean hasSpecialChar = false;\line\line         // Check each character in the password\line         for (int i = 0; i < length; i++) \{\line             char ch = password.charAt(i);\line\line             // Check for lowercase character\line             if (Character.\i isLowerCase\i0 (ch)) \{\line                 hasLowerCase = true;\line             \}\line             // Check for uppercase character\line             else if (Character.\i isUpperCase\i0 (ch)) \{\line                 hasUpperCase = true;\line             \}\line             // Check for digit\line             else if (Character.\i isDigit\i0 (ch)) \{\line                 hasDigit = true;\line             \}\line             // Check for special character\line             else if (!Character.\i isLetterOrDigit\i0 (ch)) \{\line                 hasSpecialChar = true;\line             \}\line         \}\line\line         // Update strength based on presence of each type of character\line         strength += hasLowerCase ? 1 : 0;\line         strength += hasUpperCase ? 1 : 0;\line         strength += hasDigit ? 1 : 0;\line         strength += hasSpecialChar ? 1 : 0;\line\line         // Adjust strength based on password length\line         if (length >= 12) \{\line             strength++;\line         \}\line\line         // Determine the password strength category\line         if (strength == 5) \{\line             return "Very Strong";\line         \} else if (strength >= 3) \{\line             return "Strong";\line         \} else if (strength >= 2) \{\line             return "Medium";\line         \} else \{\line             return "Weak";\line         \}\line     \}\line\line     private void showToast(String message) \{\line         Toast.\i makeText\i0 (MainActivity.this, message, Toast.\i LENGTH_SHORT\i0 ).show();\line     \}\line\}\line\par

\pard\sa200\sl276\slmult1\f2\fs22\lang31\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\f0\lang1055 activity_main.xml: \f1\fs20\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1 <?xml version="1.0" encoding="utf-8"?>\line <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\line     xmlns:app="http://schemas.android.com/apk/res-auto"\line     android:id="@+id/relativeLayout"\line     android:layout_width="match_parent"\line     android:layout_height="match_parent">\line\line     <TextView\line         android:id="@+id/passwordTextView"\line         android:layout_width="180dp"\line         android:layout_height="63dp"\line         android:layout_marginTop="16dp"\line         android:text="Generated Password"\line         android:textSize="18sp"\line         android:textStyle="bold"\line         app:layout_constraintLeft_toLeftOf="parent"\line         app:layout_constraintRight_toRightOf="parent"\line         app:layout_constraintTop_toTopOf="parent" />\line\line     <EditText\line         android:id="@+id/passwordLength"\line         android:layout_width="wrap_content"\line         android:layout_height="wrap_content"\line         android:layout_marginTop="16dp"\line         android:hint="Password Length"\line         android:inputType="number"\line         android:minHeight="48dp"\line         app:layout_constraintLeft_toLeftOf="parent"\line         app:layout_constraintRight_toRightOf="parent"\line         app:layout_constraintTop_toBottomOf="@id/passwordTextView" />\line\line     <CheckBox\line         android:id="@+id/useNumbers"\line         android:layout_width="wrap_content"\line         android:layout_height="wrap_content"\line         android:layout_marginTop="16dp"\line         android:checked="true"\line         android:text="Include Numbers"\line         app:layout_constraintStart_toStartOf="parent"\line         app:layout_constraintTop_toBottomOf="@id/passwordLength" />\line\line     <CheckBox\line         android:id="@+id/useSpecialCharacters"\line         android:layout_width="wrap_content"\line         android:layout_height="wrap_content"\line         android:layout_marginTop="16dp"\line         android:checked="true"\line         android:text="Include Special Characters"\line         app:layout_constraintStart_toStartOf="parent"\line         app:layout_constraintTop_toBottomOf="@id/useNumbers" />\line\line     <CheckBox\line         android:id="@+id/useUpperCase"\line         android:layout_width="wrap_content"\line         android:layout_height="wrap_content"\line         android:layout_marginTop="16dp"\line         android:checked="true"\line         android:text="Include Uppercase Letters"\line         app:layout_constraintStart_toStartOf="parent"\line         app:layout_constraintTop_toBottomOf="@id/useSpecialCharacters" />\line\line     <CheckBox\line         android:id="@+id/useLowerCase"\line         android:layout_width="wrap_content"\line         android:layout_height="wrap_content"\line         android:layout_marginTop="16dp"\line         android:checked="true"\line         android:text="Include Lowercase Letters"\line         app:layout_constraintStart_toStartOf="parent"\line         app:layout_constraintTop_toBottomOf="@id/useUpperCase" />\line\line     <CheckBox\line         android:id="@+id/useUniqueCharacters"\line         android:layout_width="wrap_content"\line         android:layout_height="wrap_content"\line         android:layout_marginTop="16dp"\line         android:text="Include Unique Characters"\line         app:layout_constraintStart_toStartOf="parent"\line         app:layout_constraintTop_toBottomOf="@id/useLowerCase" />\line\line     <Button\line         android:id="@+id/generateButton"\line         android:layout_width="wrap_content"\line         android:layout_height="wrap_content"\line         android:layout_marginTop="24dp"\line         android:text="Generate Password"\line         app:layout_constraintLeft_toLeftOf="parent"\line         app:layout_constraintRight_toRightOf="parent"\line         app:layout_constraintTop_toBottomOf="@id/useUniqueCharacters" />\line\line     <Button\line         android:id="@+id/copyButton"\line         android:layout_width="wrap_content"\line         android:layout_height="wrap_content"\line         android:layout_marginTop="16dp"\line         android:text="Copy Password"\line         app:layout_constraintLeft_toLeftOf="parent"\line         app:layout_constraintRight_toRightOf="parent"\line         app:layout_constraintTop_toBottomOf="@id/generateButton" />\line\line </androidx.constraintlayout.widget.ConstraintLayout>\line\par

\pard\sa200\sl276\slmult1\par
\f2\fs22\lang31\par
\par
\par
\par
\f0\lang1055\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1 strings.xml:  \f1\fs20 <resources>\line     <string name="app_name">\f3\'aa\f1 ifre Olu\f3\'ba\f1 turucu</string>\line     <string name="generate_button">\f3\'aa\f1 ifre Olu\f3\'ba\f1 tur</string>\line     <string name="password_placeholder">\f3\'aa\f1 ifre Burada G\f2\lang1033\'f6\f1\lang1055 r\f2\lang1033\'fc\f1\lang1055 necek</string>\line </resources>\line\par

\pard\sa200\sl276\slmult1\f2\fs22\lang31\par
\par
\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\f0\lang1055 AndroidManifest.xml: \f1\fs20 <?xml version="1.0" encoding="utf-8"?>\line <manifest xmlns:android="http://schemas.android.com/apk/res/android"\line     xmlns:tools="http://schemas.android.com/tools">\line\line     <application\line         android:allowBackup="true"\line         android:dataExtractionRules="@xml/data_extraction_rules"\line         android:fullBackupContent="@xml/backup_rules"\line         android:icon="@mipmap/ic_launcher"\line         android:label="@string/app_name"\line         android:roundIcon="@mipmap/ic_launcher_round"\line         android:supportsRtl="true"\line         android:theme="@style/Theme.PasswordGenerator"\line         tools:targetApi="31">\line         <activity\line             android:name=".MainActivity"\line             android:exported="true">\line             <intent-filter>\line                 <action android:name="android.intent.action.MAIN" />\line\line                 <category android:name="android.intent.category.LAUNCHER" />\line             </intent-filter>\line         </activity>\line     </application>\line\line </manifest>\par

\pard\sa200\sl276\slmult1\f2\fs22\lang31\par
}
 